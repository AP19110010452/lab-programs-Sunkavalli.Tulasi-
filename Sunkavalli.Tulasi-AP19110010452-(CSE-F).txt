1 . C program to print preorder , postorder ,inorder or traversal of binary tree

#include <stdio.h> 
#include <stdlib.h> 
  
struct node 
{ 
     int data; 
     struct node* left; 
     struct node* right; 
}; 
  
struct node* newNode(int data) 
{ 
     struct node* node = (struct node*) 
                                  malloc(sizeof(struct node)); 
     node->data = data; 
     node->left = NULL; 
     node->right = NULL; 
  
     return(node); 
} 
  
void printPostorder(struct node* node) 
{ 
     if (node == NULL) 
        return; 
  
     printPostorder(node->left);
     printPostorder(node->right); 
     printf("%d ", node->data); 
} 
  
void printInorder(struct node* node) 
{ 
     if (node == NULL) 
          return; 
  
        printInorder(node->left); 
  
    printf("%d ", node->data);   
     printInorder(node->right); 
} 
  
void printPreorder(struct node* node) 
{ 
     if (node == NULL) 
          return;
     printf("%d ", node->data);   
     printPreorder(node->left);   
     printPreorder(node->right); 
  
}     
int main()                                                                                OUTPUT:
{ 
     struct node *root  = newNode(13);                                                      Preorder traversal is
     root->left             = newNode(19);                                                  13 19 22 40 51                                           
     root->right           = newNode(51);                                                   Inorder traversal is                                                  
     root->left->left     = newNode(22);                                                    22 19 40 13 51
     root->left->right   = newNode(40);                                                     Postorder traversal is
                                                                                            22 40 19 51 13
     printf("\nPreorder traversal is \n"); 
     printPreorder(root); 
  
     printf("\nInorder traversal is \n"); 
     printInorder(root);   
  
     printf("\nPostorder traversal is \n"); 
     printPostorder(root); 
  
     getchar(); 
     return 0; 
} 

2 . C program to create and inorder traversal of binary search tree

#include<stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
struct node *newNode(int item)
{
    struct node *temp =  (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}
struct node* insert(struct node *node, int value)
{
if (node == NULL) return newNode(value);
  if (value < node->data)
        node->left  = insert(node->left, value);
    else if (value > node->data)
        node->right = insert(node->right, value);    
return node;
}  
void inorder(struct node* root){
    if(root == NULL) return;
    inorder(root->left);
    printf("%d ->", root->data);
    inorder(root->right);
}
void main(){                                                                   OUTPUT:
    struct node *root = NULL;                                                  inorder traversal
    root = insert(root, 50);                                                   1->10->19->28->50->91
    insert(root, 50);
    insert(root, 10);
    insert(root, 91);
    insert(root, 28);
    insert(root, 19);
    insert(root, 1);
 printf("\ inorder traversal \n");
    inorder(root);
}

3 . C program linear search algorithm:
#include <stdio.h>
int main(){
    int array[100],search,i,j;

    printf("enter the number of elements in array\n");
    scanf("%d",&j);
    printf("enter integer(s) \n");
    for(i=0;i<j;i++)
        scanf("%d",&array[i]);
    printf("enter the number to search\n");                                 OUTPUT:
    scanf("%d",&search);                                                    enter number of elments in array
    for(i=0;i<j;i++)                                                        4
    {                                                                       enter integer(s)
        if (array[i]==search)                                               4
        {                                                                   19
            printf("%d is present at location %d.\n",search,i+1);           8
                                                                            16
            break;                                                          enter the number to search
        }                                                                   4
    }                                                                       4 is present at location 1
    if(i==j)
        printf("%d is not present in the array.\n",search);
    return 0;
}

4.C program binary search:

#include<stdio.h>
void main(){
    int i,j,low,high,middle,n,value,swap,array[n];
    printf("enter number of elements");
    scanf("%d",&n);
    printf("enter the elemnts");
    for(i=0;i<n;i++){
        scanf("%d",&array[i]);
    }
    printf("enter the value to be searched \n");                           OUTPUT:
    scanf("%d",&value);                                                    enter number of elemnts
    low=0;                                                                 4
    i=n-1;                                                                 enter the elements
    for(i=0;i<n-1;i++){                                                    19
        for(j=0;j<n-i-1;j++){                                              32
                                                                           48
                                                                           22
            if(array[j]>array[j+1]){                                       enter the element to be searched
                swap=array[j];                                             1
                array[j]=array[j+1];                                       not found
                array[j+1]=swap;
            }
        }
    }
    while(low<=high){
        middle=(low+high)/2;
        if(array[middle]<value){
            low=middle+1;
        }
        else if(array[middle]==value){
            printf("%d is found at location %d",value,middle+1);
            break;
        }
        else{
            high=middle-1;
            
        }
        
    }
    if(low>high){
        printf("not found");
    }
}
 





 





